/// Parse an integer
@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}


/// Rem font size with pixel fallback
/// @access public
/// @param {Integer} $sizeValue
@mixin font-size($size: 16, $lineHeight: (parseInt($size) * 1.5)) {
  font-size: parseInt($size) * 1px;
  line-height: parseInt($lineHeight) * 1px;
  font-size: (parseInt($size) / 10) + rem;
  line-height: (parseInt($lineHeight) / 10) + rem;
}

@mixin rem($property, $values) {
  $px : (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
                    type-of($raw-query) == 'string',
                    unquote($raw-query),
                    inspect($raw-query)
    );

    @include media(#{$query}) {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Helper to size an element
/// @author Hugo Giraudel
/// @param {Length} $width
/// @param {Length} $height
@mixin size($width, $height: $width) {
  @include rem('width', $width);
  @include rem('height', $height);
}

/// Helper to add padding to an element
/// @param $value
@mixin all-pad($top: $vr, $right: $lr-pad, $bottom: $top, $left: $right) {
  padding-left: parseInt($left) * 1px;
  @include rem('padding-left', $left);
  padding-right: parseInt($right) * 1px;
  @include rem('padding-right', $right);
  padding-top: parseInt($top) * 1px;
  @include rem('padding-top', $top);
  padding-bottom: parseInt($bottom) * 1px;
  @include rem('padding-bottom', $bottom);
}

/// Helper to add padding to top and bottom of element
/// @param $value
@mixin tb-pad($top: ($vr * 2), $bottom: $top) {
  padding-top: parseInt($top) * 1px;
  @include rem('padding-top', $top);
  padding-bottom: parseInt($bottom) * 1px;
  @include rem('padding-bottom', $bottom);
}

/// Helper to add padding to left and right of element
/// @param $value
@mixin lr-pad($left: $lr-pad, $right: $left) {
  padding-left: parseInt($left) * 1px;
  @include rem('padding-left', $left);
  padding-right: parseInt($right) * 1px;
  @include rem('padding-right', $right);
}

/// Helper function for font weights
@mixin font-weight($weight: 'regular') {
  font-family: "UniformRounded--#{$weight}", sans-serif !important;
}


/// Grid mixins
// 1/4 width on Desktop and adjust appropriately based on device size
@mixin one-quarter {
  @include media($xs) {
    @include span-columns(12);
    @include omega(1n);
  }
  @include media($s) {
    @include span-columns(12);
    @include omega(1);
  }
  @include media($m) {
    @include span-columns(3);
    @include omega(4n);
  }
  @include media($l) {
    @include span-columns(3);
    @include omega(4n);
  }
  @include media($xl) {
    @include span-columns(3);
    @include omega(4n);
  }
}

// 1/4 width on Desktop - no omegas - useful for mixing with other mixins such as one quarter + three quarter
@mixin one-quarter-nom {
  @include media($xs) {
    @include span-columns(12);
  }
  @include media($s) {
    @include span-columns(12);
  }
  @include media($m) {
    @include span-columns(12);
  }
  @include media($l) {
    @include span-columns(3);
  }
  @include media($xl) {
    @include span-columns(3);
  }
}

// 1/3 width on Desktop
@mixin one-third {
  @include media($xs) {
    @include span-columns(12);
    @include omega(1n);
  }
  @include media($s) {
    @include span-columns(12);
    @include omega(1n);
  }
  @include media($m) {
    @include span-columns(12);
    @include omega(3n);
  }
  @include media($l) {
    @include span-columns(4);
    @include omega(3n);
  }
  @include media($xl) {
    @include span-columns(4);
    @include omega(3n);
  }
}

// 1/3 width on Desktop - no omega
@mixin one-third-nom {
  @include media($xs) {
    @include span-columns(12);
  }
  @include media($s) {
    @include span-columns(12);
  }
  @include media($m) {
    @include span-columns(12);
  }
  @include media($l) {
    @include span-columns(4);
  }
  @include media($xl) {
    @include span-columns(4);
  }
}

// 2/3 on Desktop - no omega
@mixin two-thirds-nom {
  @include media($xs) {
    @include span-columns(12);
  }
  @include media($s) {
    @include span-columns(12);
  }
  @include media($m) {
    @include span-columns(12);
  }
  @include media($l) {
    @include span-columns(8);
  }
  @include media($xl) {
    @include span-columns(8);
  }
}

// 1/2 on Desktop
@mixin one-half {
  @include media($xs) {
    @include span-columns(12);
  }
  @include media($s) {
    @include span-columns(12);
    @include omega(1n);
  }
  @include media($m) {
    @include span-columns(12);
    @include omega(2n);
  }
  @include media($l) {
    @include span-columns(6);
    @include omega(2n);
  }
  @include media($xl) {
    @include span-columns(6);
    @include omega(2n);
  }
}


// 1/2 on Desktop - no omega
@mixin one-half-nom {
  @include media($xs) {
    @include span-columns(12);
  }
  @include media($s) {
    @include span-columns(12);
  }
  @include media($m) {
    @include span-columns(12);
  }
  @include media($l) {
    @include span-columns(6);
  }
  @include media($xl) {
    @include span-columns(6);
  }
}

// 100% width
@mixin full-span {
  @include media($xs) {
    @include span-columns(12);
  }
  @include media($s) {
    @include span-columns(12);
  }
  @include media($m) {
    @include span-columns(12);
  }
  @include media($l) {
    @include span-columns(12);
  }
  @include media($xl) {
    @include span-columns(12);
  }
}


// Responsive mixins that can be used for interpolation
@mixin breakpoint--xs {
  @include media($xs) {
    @content
  }
}

@mixin breakpoint--s {
  @include media($s) {
    @content
  }
}

@mixin breakpoint--m {
  @include media($m) {
    @content
  }
}

@mixin breakpoint--l {
  @include media($l) {
    @content
  }
}

@mixin breakpoint--xl {
  @include media($xl) {
    @content
  }
}